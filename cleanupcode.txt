This code is for Home Page
{/* Mobile Search Bar - only visible on mobile, positioned between categories bar and home slider */}
      {/* <div className="mobile-search-bar-container md:hidden" style={{
        position: 'fixed',
        top: hasAnnouncementBar ? '136px' : '96px', // Adjust based on announcement bar presence
        left: '0',
        right: '0',
        zIndex: 998,
        background: '#fff',
        borderBottom: '1px solid #e5e7eb',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <div style={{ padding: '8px 16px' }}>
          <form onSubmit={handleSearchSubmit} style={{ display: 'flex', gap: '8px' }}>
            <div style={{ position: 'relative', flex: 1 }}>
              <MdSearch 
                size={20} 
                style={{ 
                  position: 'absolute', 
                  left: '12px', 
                  top: '50%', 
                  transform: 'translateY(-50%)', 
                  color: '#6b7280',
                  pointerEvents: 'none'
                }} 
              />
              <input
                type="search"
                placeholder="Search products..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    handleSearchSubmit(e);
                  }
                }}
                style={{
                  width: '100%',
                  padding: '8px 12px 8px 40px',
                  fontSize: '16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  outline: 'none',
                  backgroundColor: '#f9fafb',
                  WebkitAppearance: 'none' // Remove iOS styling
                }}
                onFocus={(e) => {
                  e.target.style.borderColor = '#3b82f6';
                  e.target.style.backgroundColor = '#fff';
                }}
                onBlur={(e) => {
                  e.target.style.borderColor = '#d1d5db';
                  e.target.style.backgroundColor = '#f9fafb';
                }}
              />
            </div>
            <button 
              type="submit"
              style={{
                padding: '8px 16px',
                fontSize: '14px',
                fontWeight: '500',
                backgroundColor: '#3b82f6',
                color: '#fff',
                border: 'none',
                borderRadius: '8px',
                cursor: 'pointer',
                minWidth: '70px'
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = '#2563eb';
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = '#3b82f6';
              }}
            >
              Search
            </button>
          </form>
        </div>
      </div> */}



code from categoriesbar for subcategory dropdoen on hover
      {hasSubcategories &&
                        dropdownRender.categoryId === category.id && (
                          <div
                            className="hidden md:block subcategories-dropdown"
                            style={{
                              position: "fixed",
                              top: `${dropdownRender.position.top}px`,
                              left: `${dropdownRender.position.left}px`,
                              width: dropdownRender.position.width || "420px",
                              minWidth:
                                dropdownRender.position.width || "340px",
                              maxWidth: "700px",
                              transform: "none",
                              // Increase dropdown width for both columns
                              // width: '520px', // was 300px or similar, now much wider
                              // minWidth: '520px',
                              // maxWidth: '700px',
                            }}
                            onMouseEnter={handleDropdownMouseEnter}
                            onMouseLeave={handleDropdownMouseLeave}
                          >
                            <div
                              className="subcategories-dropdown-content"
                              style={{
                                display: "flex",
                                flexDirection: "row",
                                width: "100%",
                              }}
                            >
                              <div
                                className="subcategory-column"
                                style={{
                                  flex: 1,
                                  minWidth: "0",
                                  maxWidth: "50%",
                                  paddingRight: "16px",
                                }}
                              >
                                {categorySubcategories
                                  .slice(
                                    0,
                                    Math.ceil(categorySubcategories.length / 2)
                                  )
                                  .map((subcategory) => {
                                    const subcategoryGroups =
                                      getGroupsForSubcategory(subcategory.id);
                                    const hasGroups =
                                      subcategoryGroups.length > 0;
                                    return (
                                      <div
                                        key={subcategory.id}
                                        className="subcategory-item-container"
                                        onMouseEnter={(e) => {
                                          if (hasGroups) {
                                            handleSubcategoryMouseEnter(
                                              subcategory.id,
                                              e
                                            );
                                          }
                                        }}
                                        onMouseLeave={() => {
                                          if (hasGroups) {
                                            handleSubcategoryMouseLeave();
                                          }
                                        }}
                                      >
                                        <Link
                                          to={`/productListing?subcategory=${encodeURIComponent(
                                            subcategory.name
                                          )}&category=${encodeURIComponent(
                                            category.name
                                          )}`}
                                          className="subcategory-item"
                                        >
                                          {subcategory.image_url ? (
                                            <img
                                              src={subcategory.image_url}
                                              alt={subcategory.name}
                                              className="subcategory-image"
                                              onError={(e) => {
                                                e.target.style.display = "none";
                                              }}
                                            />
                                          ) : null}
                                          <span className="subcategory-name">
                                            {subcategory.name}
                                          </span>
                                          {hasGroups && (
                                            <span className="subcategory-arrow">
                                              →
                                            </span>
                                          )}
                                        </Link>
                                      </div>
                                    );
                                  })}
                              </div>
                              <div
                                className="subcategory-column"
                                style={{
                                  flex: 1,
                                  minWidth: "0",
                                  maxWidth: "50%",
                                  paddingLeft: "16px",
                                }}
                              >
                                {categorySubcategories
                                  .slice(
                                    Math.ceil(categorySubcategories.length / 2)
                                  )
                                  .map((subcategory) => {
                                    const subcategoryGroups =
                                      getGroupsForSubcategory(subcategory.id);
                                    const hasGroups =
                                      subcategoryGroups.length > 0;
                                    return (
                                      <div
                                        key={subcategory.id}
                                        className="subcategory-item-container"
                                        onMouseEnter={(e) => {
                                          if (hasGroups) {
                                            handleSubcategoryMouseEnter(
                                              subcategory.id,
                                              e
                                            );
                                          }
                                        }}
                                        onMouseLeave={() => {
                                          if (hasGroups) {
                                            handleSubcategoryMouseLeave();
                                          }
                                        }}
                                      >
                                        <Link
                                          to={`/productListing?subcategory=${encodeURIComponent(
                                            subcategory.name
                                          )}&category=${encodeURIComponent(
                                            category.name
                                          )}`}
                                          className="subcategory-item"
                                        >
                                          {subcategory.image_url ? (
                                            <img
                                              src={subcategory.image_url}
                                              alt={subcategory.name}
                                              className="subcategory-image"
                                              onError={(e) => {
                                                e.target.style.display = "none";
                                              }}
                                            />
                                          ) : null}
                                          <span className="subcategory-name">
                                            {subcategory.name}
                                          </span>
                                          {hasGroups && (
                                            <span className="subcategory-arrow">
                                              →
                                            </span>
                                          )}
                                        </Link>
                                      </div>
                                    );
                                  })}
                              </div>
                            </div>
                          </div>
                        )}


                

//New Intern's code
// export default MobileHeader;
import React, { useState, useEffect, useRef } from "react";
import { Link, NavLink, useNavigate } from "react-router-dom";
import { ChevronRight, MapPin, Menu, X, Home, ShoppingCart, User, UserPlus, Mail, Bell, Search, Heart } from 'lucide-react'
import { useLocationContext } from "../../contexts/LocationContext";
import { useLocation } from 'react-router-dom'

const MobileHeader = () => {
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [isCategoriesOpen, setIsCategoriesOpen] = useState(false);
    const { selectedAddress, setShowModal, setModalMode } = useLocationContext();
    const location = useLocation();

    const getSetting = (key, defaultValue) => {
        const settings = {
            company_name: "BigBestMart"
        };
        return settings[key] || defaultValue;
    };

    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };

        window.addEventListener("resize", handleResize);
        return () => window.removeEventListener("resize", handleResize);
    }, []);

    // Close menu when route changes
    useEffect(() => {
        setIsMenuOpen(false);
    }, [location.pathname]);

    if (isMobile && location.pathname.startsWith("/subcategories")) return null;

    const toggleMenu = () => {
        setIsMenuOpen(!isMenuOpen);
    };

    const handleAddressClick = () => {
        setShowModal(true);
        setModalMode("visibility");
    };

    const navigationItems = [
        { path: "/", label: "Home", icon: Home },
        { path: "/cart", label: "Cart", icon: ShoppingCart },
        { path: "/contact-us", label: "Contact Us", icon: Mail },
    ];

    const categories = [
        { name: "Office", icon: "💼" },
        { name: "Branding", icon: "⭐" },
        { name: "Fashion", icon: "👤" },
        { name: "Electrical", icon: "⚡" },
        { name: "Groceries", icon: "🛒" },
        { name: "Electronics", icon: "📱" },
        { name: "Beauty", icon: "💄" },
        { name: "Sports", icon: "⚽" },
    ];

    return (
        <>
            <header className="bg-white header-container sticky top-0 z-[100] shadow-sm">
                {/* Main Header Row */}
                <div className="flex items-center w-full px-4 py-3 justify-between border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                    {/* Menu Button */}
                    <button
                        onClick={toggleMenu}
                        className="p-1"
                        aria-label="Toggle menu"
                    >
                        <Menu className="w-6 h-6 text-gray-700" />
                    </button>

                    {/* Logo and Company Name */}
                    
                        <NavLink to="/" className="flex flex-col items-center">
                            <div className="text-lg font-bold text-gray-800">
                                {getSetting("company_name", "BigBestMart")}
                            </div>
                            <div className="text-xs text-gray-500">
                                A2C Junctions
                            </div>
                        </NavLink>
                    </div>

                    {/* Right Icons */}
                    <div className="flex items-center space-x-2">
                        {/* Notification Bell */}
                        <NavLink to="/notifications" className="p-1.5">
                            <Bell className="w-5 h-5 text-gray-700" />
                        </NavLink>
                        
                        {/* Cart Icon */}
                        <NavLink to="/cart" className="p-1.5">
                            <ShoppingCart className="w-5 h-5 text-gray-700" />
                        </NavLink>
                        
                        {/* Sign In Button */}
                        <NavLink
                            to="/login"
                            className="px-3 py-1.5 border border-gray-300 rounded text-sm text-gray-700 hover:bg-gray-50"
                        >
                            Sign In
                        </NavLink>
                    </div>
                </div>

                {/* Location Selection Bar */}
                <button
                    className="w-full px-4 py-2.5 bg-white flex items-center text-left hover:bg-gray-50 transition-colors border-b border-gray-100"
                    onClick={handleAddressClick}
                >
                    <div className="flex items-center space-x-2 min-w-0 flex-1">
                        <MapPin className="w-4 h-4 text-gray-600 flex-shrink-0" />
                        <span className="truncate text-xs flex">
                      Select Delivery Address <ChevronRight size={16} />                      
                       {selectedAddress ? <span>{selectedAddress.city} {selectedAddress.state} {selectedAddress.postal_code}</span> : <></>}
                  </span>
                    </div>
                </button>


                {/* Category Filter Tags */}
               <div className="px-4 py-3 bg-white border-b border-gray-200">
     <div className="flex gap-4 overflow-x-auto p-2">
      {categories.map((category) => (
        <button
          key={category.id}
          className="flex items-center gap-2 px-4 py-2 rounded-xl bg-white shadow hover:bg-gray-100 transition"
        >
          <span className="text-xl">{category.icon}</span>
          <span className="text-sm font-medium">{category.name}</span>
        </button>
      ))}
    </div>
</div>
            </header>

            {/* Mobile Menu Overlay */}
            {isMenuOpen && (
                <div className="fixed inset-0 z-[9999] bg-black bg-opacity-50" onClick={toggleMenu}>
                    <div 
                        className="fixed left-0 top-0 h-full w-80 bg-white shadow-lg transform transition-transform duration-300 ease-in-out"
                        onClick={(e) => e.stopPropagation()}
                    >
                        {/* Menu Header with Search */}
                        <div className="p-4 border-b border-gray-200 bg-gray-50">
                            <div className="flex items-center justify-between mb-3">
                                <h2 className="text-lg font-semibold text-gray-800">
                                    {getSetting("company_name", "BigBestMart")}
                                </h2>
                                <button
                                    onClick={toggleMenu}
                                    className="p-2 rounded-lg hover:bg-gray-200 transition-colors"
                                >
                                    <X className="w-5 h-5 text-gray-600" />
                                </button>
                            </div>
                            
                            {/* Search Bar in Menu */}
                            <div className="relative">
                                <input
                                    type="text"
                                    placeholder="Search products..."
                                    className="w-full pl-4 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                />
                                <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                            </div>
                        </div>

                        {/* Navigation Menu */}
                        <nav className="flex-1 overflow-y-auto">
                            <div className="py-2">
                                {/* Categories Dropdown */}
                                <div>
                                    <button
                                        onClick={() => setIsCategoriesOpen(!isCategoriesOpen)}
                                        className="flex items-center justify-between w-full px-6 py-4 text-gray-700 hover:bg-gray-100 transition-colors"
                                    >
                                        <div className="flex items-center">
                                            <Menu className="w-5 h-5 mr-4" />
                                            <span className="font-medium">Categories</span>
                                        </div>
                                        <ChevronRight className={`w-4 h-4 transition-transform ${isCategoriesOpen ? 'rotate-90' : ''}`} />
                                    </button>
                                    
                                    {isCategoriesOpen && (
                                        <div className="bg-gray-50 border-t border-b border-gray-200">
                                            {categories.map((category) => (
                                                <button
                                                    key={category.name}
                                                    className="flex items-center w-full px-12 py-3 text-gray-600 hover:bg-gray-100 transition-colors text-sm"
                                                    onClick={() => setIsMenuOpen(false)}
                                                >
                                                    <span className="mr-3 text-base">{category.icon}</span>
                                                    <span>{category.name}</span>
                                                </button>
                                            ))}
                                        </div>
                                    )}
                                </div>

                                {/* Navigation Items */}
                                {navigationItems.map(({ path, label, icon: IconComponent }) => (
                                    <NavLink
                                        key={path}
                                        to={path}
                                        className={({ isActive }) =>
                                            `flex items-center px-6 py-4 text-gray-700 hover:bg-gray-100 transition-colors ${
                                                isActive ? "bg-blue-50 text-blue-600 border-r-4 border-blue-600" : ""
                                            }`
                                        }
                                        onClick={() => setIsMenuOpen(false)}
                                    >
                                        <IconComponent className="w-5 h-5 mr-4" />
                                        <span className="font-medium">{label}</span>
                                    </NavLink>
                                ))}

                                {/* Address Section */}
                                <div className="mt-4 pt-4 border-t border-gray-200">
                                    <div className="px-6 mb-3">
                                        <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wide">
                                            Delivery
                                        </h3>
                                    </div>
                                    <button
                                        onClick={() => {
                                            handleAddressClick();
                                            setIsMenuOpen(false);
                                        }}
                                        className="flex items-center px-6 py-3 w-full text-left text-gray-700 hover:bg-gray-100 transition-colors"
                                    >
                                        <MapPin className="w-5 h-5 mr-4 text-blue-600" />
                                        <div className="flex-1 min-w-0">
                                            <div className="font-medium">Change Address</div>
                                            {selectedAddress && (
                                                <div className="text-sm text-gray-500 truncate">
                                                    {selectedAddress.city}, {selectedAddress.state}
                                                </div>
                                            )}
                                        </div>
                                        <ChevronRight className="w-4 h-4 text-gray-400" />
                                    </button>
                                </div>
                            </div>
                        </nav>

                        {/* Bottom Login Section */}
                        <div className="p-4 border-t border-gray-200 bg-gray-50">
                            <div className="flex space-x-3">
                                <NavLink
                                    to="/login"
                                    className="flex-1 px-4 py-2 bg-blue-500 text-white text-center rounded-md hover:bg-blue-600 transition-colors text-sm font-medium"
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    Login
                                </NavLink>
                                <NavLink
                                    to="/signup"
                                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 text-center rounded-md hover:bg-gray-100 transition-colors text-sm font-medium"
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    Sign Up
                                </NavLink>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
};

export default MobileHeader;